#include <iostream>
#include <string>


struct Node {
    std::string std;      
    int integer;            
    double dbl;          
    Node* next = nullptr;  
};

class List {
private:
    Node* head = nullptr;

public:
    
    void addFirst(std::string std, int integer, double dbl) {
        Node* newNode = new Node;
        newNode->std = std;
        newNode->integer = integer;
        newNode->dbl = dbl;
        newNode->next = head;
        head = newNode;
    }
    
     
    void addintheEnd(std::string std, int integer, double dbl) {
        if (!head) {
            addFirst(std, integer, dbl);
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        Node* newNode = new Node;
        newNode->std = std;
        newNode->integer = integer;
        newNode->dbl = dbl;
        temp->next = newNode;
    }
    
    void addAfterNumber(std::string targetNumber, std::string std, int integer, double dbl) {
        if (!head || head->std == targetNumber) {
            addFirst(std, integer, dbl);
            return;
        }
        Node* previous = nullptr;
        Node* temp = head;
        while (temp && temp->std != targetNumber) {
            previous = temp;
            temp = temp->next;
        }
        if (temp) {
            Node* newNode = new Node;
            newNode->std = std;
            newNode->integer = integer;
            newNode->dbl = dbl;
            newNode->next = temp;
            previous->next = newNode;
        }
        
    }
    
    void addBeforeNumber(std::string targetNumber, std::string std, int integer, double dbl) {
        if (!head || head->std == targetNumber) {
            addFirst(std, integer, dbl);
            return;
        }
        Node* previous = nullptr;
        Node* temp = head;
        while (temp && temp->std != targetNumber) {
            previous = temp;
            temp = temp->next;
        }
        if (temp) {
            Node* newNode = new Node;
            newNode->std = std;
            newNode->integer = integer;
            newNode->dbl = dbl;
            newNode->next = temp;
            previous->next = newNode;
        }
        
    }
    
    void removeNumber(std::string std) {
        if (head->std == std) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* previous = nullptr;
        Node* temp = head;
        while (temp && temp->std != std) {
            previous = temp;
            temp = temp->next;
        }
        if (temp) {
            previous->next = temp->next;
            delete temp;
        }
    }
    
    void printList() {
        Node* temp = head;
        while (temp) {
            std::cout << "Std: " << temp->std << ", Integer: " << temp->integer << ", dbl: " << temp->dbl << std::endl;
            temp = temp->next;
        }
    }


};

int main() {
    List list;

    
    list.addFirst("First", 1, 1.1);   
    list.addintheEnd("Second", 2, 2.2);         // Добавление в конец
    list.addAfterNumber("First","Third", 3, 3.3);  // Добавление после First
    list.addBeforeNumber("Second", "Fourth", 4, 4.4); // Добавление перед Second

    
    std::cout << "List content:" << std::endl;
    list.printList();

    
    list.removeNumber("Third");

    
    std::cout << "\nUpdated list content:" << std::endl;
    list.printList();

    return 0;
}
    

    
