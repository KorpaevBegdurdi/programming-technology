#include <iostream>
#include <string>

struct NodeData {
    std::string str;
    int integer;
    double dbl;

    NodeData(std::string s, int i, double d) : str(s), integer(i), dbl(d) {}
};

struct Node {
    NodeData data;
    Node* next;

    Node(std::string s, int i, double d) : data(s, i, d), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    ~LinkedList() {                //Деструктор 
        while (head) {             //Предназначен для освобождения памяти
            Node* temp = head;     //выделенную для всех узлов списка   
            head = head->next;     //чтобы избежать утечек памяти
            delete temp;
        }
    }

    void append(std::string s, int i, double d) {
        Node* newNode = new Node(s, i, d);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    bool insertAfter(int index, std::string s, int i, double d) {
        Node* temp = head;
        int count = 0;
        while (temp && count < index) {
            temp = temp->next;
            count++;
        }
        if (!temp) return false;

        Node* newNode = new Node(s, i, d);
        newNode->next = temp->next;
        temp->next = newNode;
        return true;
    }

    bool insertBefore(int index, std::string s, int i, double d) {
        if (index == 0) {
            Node* newNode = new Node(s, i, d);
            newNode->next = head;
            head = newNode;
            return true;
        }

        Node* temp = head;
        int count = 0;
        while (temp && count < index - 1) {
            temp = temp->next;
            count++;
        }
        if (!temp || !temp->next) return false;

        Node* newNode = new Node(s, i, d);
        newNode->next = temp->next;
        temp->next = newNode;
        return true;
    }

    bool remove(int index) {
        if (!head) return false;
        if (index == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return true;
        }

        Node* temp = head;
        int count = 0;
        while (temp->next && count < index - 1) {
            temp = temp->next;
            count++;
        }
        if (!temp->next) return false;

        Node* nodeToDelete = temp->next;
        temp->next = nodeToDelete->next;
        delete nodeToDelete;
        return true;
    }

    void display() {
        Node* temp = head;
        while (temp) {
            std::cout << "{" << temp->data.str << ", " << temp->data.integer << ", " << temp->data.dbl << "}\n";
            temp = temp->next;
        }
    }
};

int main() {
    LinkedList list;

    list.append("First", 10, 10.1);
    list.append("Second", 20, 20.2);
    list.append("Third", 30, 30.3);
    std::cout << "First list:\n";
    list.display();

    list.insertAfter(2, "InsertedAfterSecond", 40, 40.4);
    std::cout << "\nAfter inserting after index 2:\n";
    list.display();

    list.insertBefore(1, "InsertedBeforeThird", 50, 50.5);
    std::cout << "\nAfter inserting before index 1:\n";
    list.display();

    list.remove(2);
    std::cout << "\nAfter removing index 2:\n";
    list.display();

    return 0;
}
